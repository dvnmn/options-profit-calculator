{"version":3,"sources":["components/Calculator.js","App.js","index.js"],"names":["Input","props","useState","ticker","setTicker","price","setPrice","strike","setStrike","type","setType","optionsPrice","setOPrice","class","placeholder","value","onChange","e","target","onClick","createOutput","Output","optionPrice","chartData","setChartData","calcKeyPrices","keyPrices","push","parseInt","calcProfitLoss","prices","optionType","calcCall","calcPut","profitLoss","i","length","profit","loss","parseFloat","useEffect","labels","datasets","label","data","borderColor","fill","borderJoinStyle","lineTension","Calculator","output","setOutput","className","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fc6c128.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./Calculator.css\";\r\n\r\n\r\n/**\r\n * Componenet used to retrieve input from the user in the calculator.\r\n * @param props \r\n */\r\nfunction Input(props) {\r\n    const [ticker, setTicker] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [strike, setStrike] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [optionsPrice, setOPrice] = useState(\"\");\r\n\r\n    return (\r\n        <div class=\"Input\">\r\n            <div class=\"wrapper\">\r\n                {/* Obtains ticker symbol from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Ticker\"\r\n                    value={ticker} \r\n                    onChange={(e) => setTicker(e.target.value)}\r\n                ></input>\r\n                \r\n                {/* Obtains the price of the underlying from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Current price\"\r\n                    value={price} \r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                ></input>\r\n                \r\n                {/* Obtains the strike price of the option from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Strike price\"\r\n                    value={strike} \r\n                    onChange={(e) => setStrike(e.target.value)}\r\n                ></input>\r\n            \r\n                {/* Obtains the type of option from the user. */}\r\n                <input \r\n                    type=\"text\"  \r\n                    placeholder=\"Option type\"\r\n                    value={type} \r\n                    onChange={(e) => setType(e.target.value)}\r\n                ></input>\r\n\r\n                {/* Obtains the price of the option from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Option Price\"\r\n                    value={optionsPrice} \r\n                    onChange={(e) => setOPrice(e.target.value)}\r\n                ></input>\r\n                \r\n                {/* When button is pressed, the output graph is rendered. */}\r\n                <button onClick={() => props.createOutput(\r\n                    <Output \r\n                        ticker={ticker} \r\n                        price={price}\r\n                        strike={strike}\r\n                        type={type}\r\n                        optionPrice={optionsPrice}\r\n                    />)}\r\n                >Calculate</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Creates the table showing profit/losses on the given options play.\r\n * @param props \r\n */\r\nfunction Output(props) {\r\n    const [chartData, setChartData] = useState({});\r\n   \r\n    //Renders the line graph showing the profit/loss of the given option play.\r\n    const chart = () => {\r\n        setChartData({\r\n            labels: calcKeyPrices(),\r\n            datasets: [{\r\n                label: `${props.ticker} ${props.strike} ${props.type}`,\r\n                data: calcProfitLoss(calcKeyPrices(), props.type),\r\n                borderColor: 'rgba(255, 99, 132, 100)',\r\n                fill: false,\r\n                borderJoinStyle: 'miter',\r\n                lineTension: 0\r\n            }]\r\n        });\r\n    };\r\n    \r\n    //Calculates the x-axis representing the price of the underlying stock.\r\n    const calcKeyPrices = () => {\r\n        var keyPrices = [];\r\n\r\n        keyPrices.push(props.strike - 4);\r\n        keyPrices.push(props.strike - 2);\r\n        keyPrices.push(props.strike);\r\n        keyPrices.push(parseInt(props.strike) + 2);\r\n        keyPrices.push(parseInt(props.strike) + 4);\r\n\r\n        return keyPrices;\r\n    };\r\n\r\n    //Calculates the profit/loss values for the given option.\r\n    const calcProfitLoss = (prices, optionType) => {\r\n        switch(optionType) {\r\n            case \"call\": return calcCall(prices);\r\n            case \"put\": return calcPut(prices);\r\n        }\r\n    };\r\n\r\n    //Calculates the profit/losses of a put option.\r\n    const calcPut = (prices) => {\r\n        var profitLoss = [];\r\n\r\n        for (var i = 0; i < prices.length; i++) {\r\n            /**\r\n             * If the price of the underlying is less than the strike,\r\n             * profit or a lesser loss was made.\r\n             */\r\n            if (prices[i] <= props.strike) {\r\n                let profit = props.strike - prices[i] - props.optionPrice;\r\n                profitLoss.push(profit * 100);\r\n            \r\n            /**\r\n             * If the price of the underylying is greater than the strike,\r\n             * a full loss was made.\r\n             */\r\n            } else{\r\n                let loss = 0 - parseFloat(props.optionPrice);\r\n                profitLoss.push(loss * 100);\r\n            }\r\n        }\r\n\r\n        return profitLoss;\r\n    }\r\n\r\n    //Calculates the profit/losses of a call option.\r\n    const calcCall = (prices) => {\r\n        var profitLoss = [];\r\n\r\n        for (var i = 0; i < prices.length; i++) {\r\n            /**\r\n             * If the price of the underlying is greater than the strike,\r\n             * profit or a lesser loss was made.\r\n             */\r\n            if (prices[i] <= props.strike) {\r\n                let loss = 0 - parseFloat(props.optionPrice);\r\n                profitLoss.push(loss * 100);\r\n           \r\n           /**\r\n             * If the price of the underylying is less than the strike,\r\n             * a full loss was made.\r\n             */\r\n            } else{\r\n                let profit = prices[i] - props.strike - props.optionPrice;\r\n                profitLoss.push(profit * 100);\r\n            }\r\n        }\r\n\r\n        return profitLoss;\r\n    }\r\n\r\n    useEffect(() => {\r\n        chart();\r\n    });\r\n\r\n    return (\r\n        <div class=\"Output\">\r\n            <div class=\"wrapper\">\r\n                <Line data={chartData} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Creates the main calculator found in the middle of the application.\r\n */\r\nfunction Calculator() {\r\n    const [output, setOutput] = useState(\"\");\r\n   \r\n    return (\r\n      <div className=\"Calculator\">\r\n          <Input createOutput={setOutput} />\r\n          {output}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from \"react\";\r\nimport \"./App.css\"\r\nimport Calculator from \"./components/Calculator\";\r\n\r\n\r\n/**\r\n * Acts as the foundation for the application.\r\n */\r\nfunction App() {\r\n  return(\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\n/**\r\n * Renders the application onto the root HTML file.\r\n */\r\nReactDOM.render(\r\n  <App />, document.getElementById('root')\r\n);"],"sourceRoot":""}