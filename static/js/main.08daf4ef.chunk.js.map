{"version":3,"sources":["components/Calculator.js","App.js","index.js"],"names":["Input","props","useState","ticker","setTicker","price","setPrice","strike","setStrike","type","setType","optionsPrice","setOPrice","class","placeholder","value","onChange","e","target","onBlur","url","success","req","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","getRequest","resp","JSON","parse","alert","readOnly","id","disabled","selected","onClick","error","test","validate","createOutput","Output","toUpperCase","optionPrice","chartData","setChartData","calcKeyPrices","keyPrices","push","parseInt","calcProfitLoss","prices","optionType","toLowerCase","calcCall","calcPut","profitLoss","i","length","profit","loss","parseFloat","useEffect","labels","datasets","label","data","borderColor","fill","borderJoinStyle","lineTension","Calculator","output","setOutput","className","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08daf4ef.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./Calculator.css\";\r\n\r\n\r\n/**\r\n * Componenet used to retrieve input from the user in the calculator.\r\n * \r\n * @param props\r\n * @returns the left side of the calculator which takes input in from the user.\r\n */\r\nfunction Input(props) {\r\n    const [ticker, setTicker] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [strike, setStrike] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [optionsPrice, setOPrice] = useState(\"\");\r\n\r\n    /**\r\n     * Validates the user's input to make sure there are no errors.\r\n     * \r\n     * @returns true if no errors are found; false otherwise.\r\n     */\r\n    const validate = () => {\r\n        let error = \"\";\r\n\r\n        //Strike test\r\n        if (/[^0-9.]/.test(strike) || strike === \"\") {\r\n            error += \"Invalid strike.\\n\";\r\n            setStrike(\"\");\r\n        }\r\n\r\n        if (type === \"\") {\r\n            error += \"Please select an option type.\\n\";\r\n            setType(\"\");\r\n        }\r\n        //Option price test\r\n        if (/[^0-9.]/.test(optionsPrice) || optionsPrice === \"\") {\r\n            error += \"Invalid options price.\\n\";\r\n            setOPrice(\"\");\r\n        }\r\n\r\n        //If the error is not empty, alert the error/s and return false.\r\n        if (error !== \"\") {\r\n            alert(error);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Grabs the current price of the given ticker using Finacial Modeling Prep's\r\n     * realtime stock data API.\r\n     */\r\n    const getTickerPrice = () => {\r\n        var numbers = 'demo';\r\n\r\n        getRequest(\r\n            'https://financialmodelingprep.com/api/v3/quote-short/'\r\n            + ticker + '?apikey=' + numbers,\r\n           \r\n            (responseText) => {\r\n                let resp = JSON.parse(responseText);\r\n\r\n                try {\r\n                    setPrice(resp[0].price);\r\n                } catch (e) {\r\n                    alert(\"Invalid ticker.\");\r\n                }\r\n            }\r\n        );\r\n\r\n        function getRequest(url, success) {\r\n            var req = false;\r\n            \r\n            try {\r\n                req = new XMLHttpRequest();\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n\r\n            if (!req) return false;\r\n            if (typeof success != 'function') success = function() {};\r\n            \r\n            req.onreadystatechange = () => {\r\n                if (req.readyState == 4) {\r\n                    if (req.status === 200) {\r\n                        success(req.responseText)\r\n                    }\r\n                }\r\n            }\r\n        \r\n            req.open(\"GET\", url, true);\r\n            req.send(null);\r\n            \r\n            return req;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"Input\">\r\n            <div class=\"wrapper\">\r\n                {/* Obtains ticker symbol from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Ticker\"\r\n                    value={ticker} \r\n                    onChange={(e) => setTicker(e.target.value)}\r\n                    onBlur={() => getTickerPrice()}\r\n                ></input>\r\n                \r\n                {/* Obtains the price of the underlying from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Current price\"\r\n                    value={price} \r\n                    readOnly\r\n                ></input>\r\n                \r\n                {/* Obtains the strike price of the option from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Strike price\"\r\n                    value={strike} \r\n                    onChange={(e) => setStrike(e.target.value)}\r\n                ></input>\r\n            \r\n                {/* Drop-down list with types of options the user can choose. */}\r\n                <select value={type} onChange={(e) => setType(e.target.value)}>\r\n                    <option value=\"\" id=\"typeTitle\" disabled selected>Choose an option type</option>\r\n                    <option value=\"Call\">Call</option>\r\n                    <option value=\"Put\">Put</option>\r\n                </select>\r\n\r\n                {/* Obtains the price of the option from the user. */}\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Option Price\"\r\n                    value={optionsPrice} \r\n                    onChange={(e) => setOPrice(e.target.value)}\r\n                ></input>\r\n                \r\n                {/* When button is pressed, the output graph is rendered. */}\r\n                <button onClick={() => {\r\n                    if (validate()) {\r\n                        props.createOutput(\r\n                            <Output \r\n                                ticker={ticker.toUpperCase()} \r\n                                price={price}\r\n                                strike={strike}\r\n                                type={type}\r\n                                optionPrice={optionsPrice}\r\n                            />\r\n                        )\r\n                    }\r\n                }}>Calculate</button>           \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Creates the table showing profit/losses on the given options play.\r\n * \r\n * @param props\r\n * @returns the right side of the calculator which displays a graph and other information \r\n * about the given option play.\r\n */\r\nfunction Output(props) {\r\n    const [chartData, setChartData] = useState({});\r\n   \r\n    /**\r\n     * Renders the line graph showing the profit/losses of the given option play.\r\n     */\r\n    const chart = () => {\r\n        setChartData({\r\n            labels: calcKeyPrices(),\r\n            datasets: [{\r\n                label: `${props.ticker} ${props.strike} ${props.type}`,\r\n                data: calcProfitLoss(calcKeyPrices(), props.type),\r\n                borderColor: 'rgba(255, 99, 132, 100)',\r\n                fill: false,\r\n                borderJoinStyle: 'miter',\r\n                lineTension: 0\r\n            }]\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * Calculates the x-axis representing the price of the underlying stock.\r\n     * \r\n     * @returns an Array with the price points that will be displayed on the graph.\r\n     * It will always include the strike price of the option as the middle value.\r\n     */\r\n    const calcKeyPrices = () => {\r\n        var keyPrices = [];\r\n\r\n        keyPrices.push(props.strike - 4);\r\n        keyPrices.push(props.strike - 2);\r\n        keyPrices.push(props.strike);\r\n        keyPrices.push(parseInt(props.strike) + 2);\r\n        keyPrices.push(parseInt(props.strike) + 4);\r\n\r\n        return keyPrices;\r\n    };\r\n    \r\n    /**\r\n     * Calculates the profit/loss values for the given option play and returns\r\n     * an array with the profit/loss at the given price points.\r\n     * \r\n     * @param {Array} prices \r\n     * @param {String} optionType \r\n     * @returns profit/loss values at the given price points.\r\n     */\r\n    const calcProfitLoss = (prices, optionType) => {\r\n        switch(optionType.toLowerCase()) {\r\n            case \"call\": return calcCall(prices);\r\n            case \"put\": return calcPut(prices);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calculates the profit/losses of a PUT option.\r\n     * \r\n     * @param {Array} prices \r\n     * @retursn profit/loss values at the given price points.\r\n     */\r\n    const calcPut = (prices) => {\r\n        var profitLoss = [];\r\n\r\n        for (var i = 0; i < prices.length; i++) {\r\n            /**\r\n             * If the price of the underlying is less than the strike,\r\n             * profit or a lesser loss was made.\r\n             */\r\n            if (prices[i] <= props.strike) {\r\n                let profit = props.strike - prices[i] - props.optionPrice;\r\n                profitLoss.push(profit * 100);\r\n            \r\n            /**\r\n             * If the price of the underylying is greater than the strike,\r\n             * a full loss was made.\r\n             */\r\n            } else{\r\n                let loss = 0 - parseFloat(props.optionPrice);\r\n                profitLoss.push(loss * 100);\r\n            }\r\n        }\r\n\r\n        return profitLoss;\r\n    }\r\n\r\n    /**\r\n     * Calculates the profit/losses of a CALL options.\r\n     * \r\n     * @param {Array} prices\r\n     * @returns profit/loss values at the given price points.\r\n     */\r\n    const calcCall = (prices) => {\r\n        var profitLoss = [];\r\n\r\n        for (var i = 0; i < prices.length; i++) {\r\n            /**\r\n             * If the price of the underlying is greater than the strike,\r\n             * profit or a lesser loss was made.\r\n             */\r\n            if (prices[i] <= props.strike) {\r\n                let loss = 0 - parseFloat(props.optionPrice);\r\n                profitLoss.push(loss * 100);\r\n           \r\n           /**\r\n             * If the price of the underylying is less than the strike,\r\n             * a full loss was made.\r\n             */\r\n            } else{\r\n                let profit = prices[i] - props.strike - props.optionPrice;\r\n                profitLoss.push(profit * 100);\r\n            }\r\n        }\r\n\r\n        return profitLoss;\r\n    }\r\n\r\n    useEffect(() => {\r\n        chart();\r\n    });\r\n\r\n    return (\r\n        <div class=\"Output\">\r\n            <div class=\"wrapper\">\r\n                <Line data={chartData} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Creates the main calculator found in the middle of the application.\r\n * \r\n * @returns calculator component.\r\n */\r\nfunction Calculator() {\r\n    const [output, setOutput] = useState(\"\");\r\n   \r\n    return (\r\n      <div className=\"Calculator\">\r\n          <Input createOutput={setOutput} />\r\n          {output}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from \"react\";\r\nimport \"./App.css\"\r\nimport Calculator from \"./components/Calculator\";\r\n\r\n\r\n/**\r\n * Acts as the foundation for the application.\r\n */\r\nfunction App() {\r\n  return(\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\n/**\r\n * Renders the application onto the root HTML file.\r\n */\r\nReactDOM.render(\r\n  <App />, document.getElementById('root')\r\n);"],"sourceRoot":""}